{"version":3,"sources":["../../src/useInterval.ts","../../src/utils.ts","../../src/index.tsx","App.js","changeColor.js","index.js"],"names":["noop","randomValue","min","max","Math","random","randomInt","floor","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","useRef","useState","localProgress","localProgressSet","active","startingValue","refreshRate","pressedContinuous","setPressedContinuous","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","loaderContainerStyle","position","top","left","zIndex","width","initialShadowStyles","boxShadow","opacity","transition","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useEffect","current","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","callback","delay","savedCallback","_progress","setTimeout","_loaderStyle","id","setInterval","clearInterval","React","App","setProgress","barColor","setBarColor","buttonsColor","setButtonsColor","usingRef","setUsingRef","saveToClipboard","text","navigator","clipboard","writeText","then","window","alert","onClick","language","colors","currentColor","filter","x","length","changeColor","changeMode","refMode","target","rel","href","data-color-scheme","data-size","data-show-count","aria-label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb33e5ce.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n    callback: () => void,\n    delay: number | null | false,\n    immediate?: boolean\n) {\n    const savedCallback = useRef(noop)\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback\n    })\n\n    // Execute callback if immediate is set.\n    useEffect(() => {\n        if (!immediate) return\n        if (delay === null || delay === false) return\n        savedCallback.current()\n    }, [immediate])\n\n    // Set up the interval.\n    useEffect(() => {\n        if (delay === null || delay === false) return undefined\n        const tick = () => savedCallback.current()\n        const id = setInterval(tick, delay)\n        return () => clearInterval(id)\n    }, [delay])\n}\n\nexport default useInterval\n","export function randomValue(min: number, max: number): number {\n    return Math.random() * (max - min + 1) + min\n}\n\nexport function randomInt(min: number, max: number): number {\n    return Math.floor(randomValue(min, max))\n}\n","import * as React from 'react'\nimport {\n    CSSProperties,\n    useEffect,\n    useState,\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt, randomValue } from './utils'\n\ntype IProps = {\n    progress?: number\n    color?: string\n    shadow?: boolean\n    background?: string\n    height?: number\n    onLoaderFinished?: () => void\n    className?: string\n    containerClassName?: string\n    loaderSpeed?: number\n    transitionTime?: number\n    waitingTime?: number\n    style?: CSSProperties\n    containerStyle?: CSSProperties\n    shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n    continuousStart: (startingValue?: number, refreshRate?: number) => void\n    staticStart: (startingValue?: number) => void\n    complete: () => void\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n    (\n        {\n            progress,\n            height = 2,\n            className = '',\n            color = 'red',\n            background = 'transparent',\n            onLoaderFinished,\n            transitionTime = 300,\n            loaderSpeed = 500,\n            waitingTime = 1000,\n            shadow = true,\n            containerStyle = {},\n            style = {},\n            shadowStyle: shadowStyleProp = {},\n            containerClassName = '',\n        },\n        ref\n    ) => {\n        const isMounted = useRef(false)\n        const [localProgress, localProgressSet] = useState<number>(0)\n        const [pressedContinuous, setPressedContinuous] = useState<{\n            active: boolean\n            startingValue: number\n            refreshRate: number\n        }>({ active: false, startingValue: 20, refreshRate: 1000 })\n        const [usingProps, setUsingProps] = useState(false)\n\n        const [pressedStaticStart, setStaticStartPressed] = useState<{\n            active: boolean\n            value: number\n        }>({ active: false, value: 20 })\n\n        const initialLoaderStyle: CSSProperties = {\n            height: '100%',\n            background: color,\n            transition: `all ${loaderSpeed}ms ease`,\n            width: '0%',\n        }\n\n        const loaderContainerStyle: CSSProperties = {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            height,\n            background,\n            zIndex: 99999999999,\n            width: 100 + '%',\n        }\n\n        const initialShadowStyles: CSSProperties = {\n            boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n            width: '5%',\n            opacity: 1,\n            position: 'absolute',\n            height: '100%',\n            transition: `all ${loaderSpeed}ms ease`,\n            transform: 'rotate(3deg) translate(0px, -4px)',\n            left: '-10rem',\n        }\n\n        const [loaderStyle, loaderStyleSet] =\n            useState<CSSProperties>(initialLoaderStyle)\n        const [shadowStyle, shadowStyleSet] =\n            useState<CSSProperties>(initialShadowStyles)\n\n        useEffect(() => {\n            isMounted.current = true\n            return () => {\n                isMounted.current = false\n            }\n        }, [])\n\n        useImperativeHandle(ref, () => ({\n            continuousStart(startingValue: number, refreshRate: number = 1000) {\n                if (pressedStaticStart.active) return\n                if (usingProps) {\n                    console.warn(\n                        \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n                    )\n                    return\n                }\n\n                const val = startingValue || randomInt(10, 20)\n                setPressedContinuous({\n                    active: true,\n                    refreshRate,\n                    startingValue,\n                })\n                localProgressSet(val)\n                checkIfFull(val)\n            },\n            staticStart(startingValue?: number) {\n                if (pressedContinuous.active) return\n                if (usingProps) {\n                    console.warn(\n                        \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n                    )\n                    return\n                }\n\n                const val = startingValue || randomInt(30, 50)\n                setStaticStartPressed({\n                    active: true,\n                    value: val,\n                })\n                localProgressSet(val)\n                checkIfFull(val)\n            },\n            complete() {\n                if (usingProps) {\n                    console.warn(\n                        \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n                    )\n                    return\n                }\n                localProgressSet(100)\n                checkIfFull(100)\n            },\n        }))\n\n        useEffect(() => {\n            loaderStyleSet({\n                ...loaderStyle,\n                background: color,\n            })\n\n            shadowStyleSet({\n                ...shadowStyle,\n                boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n            })\n        }, [color])\n\n        useEffect(() => {\n            if (ref) {\n                if (ref && progress !== undefined) {\n                    console.warn(\n                        'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n                    )\n                    return\n                }\n                checkIfFull(localProgress)\n                setUsingProps(false)\n            } else {\n                if (progress) checkIfFull(progress)\n\n                setUsingProps(true)\n            }\n        }, [progress])\n\n        const checkIfFull = (_progress: number) => {\n            if (_progress >= 100) {\n                // now it should wait a little bit\n                loaderStyleSet({\n                    ...loaderStyle,\n                    width: '100%',\n                })\n                if (shadow) {\n                    shadowStyleSet({\n                        ...shadowStyle,\n                        left: _progress - 10 + '%',\n                    })\n                }\n\n                setTimeout(() => {\n                    if (!isMounted.current) {\n                        return\n                    }\n                    // now it can fade out\n                    loaderStyleSet({\n                        ...loaderStyle,\n                        opacity: 0,\n                        width: '100%',\n                        transition: `all ${transitionTime}ms ease-out`,\n                        color: color,\n                    })\n\n                    setTimeout(() => {\n                        if (!isMounted.current) {\n                            return\n                        }\n                        // here we wait for it to fade\n                        if (pressedContinuous.active) {\n                            // if we have continous loader just ending, we kill it and reset it\n                            setPressedContinuous({\n                                ...pressedContinuous,\n                                active: false,\n                            })\n                            localProgressSet(0)\n                            checkIfFull(0)\n                        }\n\n                        if (pressedStaticStart.active) {\n                            setStaticStartPressed({\n                                ...pressedStaticStart,\n                                active: false,\n                            })\n                            localProgressSet(0)\n                            checkIfFull(0)\n                        }\n\n                        if (onLoaderFinished) onLoaderFinished()\n                        localProgressSet(0)\n                        checkIfFull(0)\n                    }, transitionTime)\n                }, waitingTime)\n            } else {\n                loaderStyleSet((_loaderStyle) => {\n                    return {\n                        ..._loaderStyle,\n                        width: _progress + '%',\n                        opacity: 1,\n                        transition:\n                            _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n                    }\n                })\n\n                if (shadow) {\n                    shadowStyleSet({\n                        ...shadowStyle,\n                        left: _progress - 5.5 + '%',\n                        transition:\n                            _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n                    })\n                }\n            }\n        }\n\n        useInterval(\n            () => {\n                const random = randomValue(\n                    Math.min(10, (100 - localProgress) / 5),\n                    Math.min(20, (100 - localProgress) / 3)\n                )\n\n                if (localProgress + random < 100) {\n                    localProgressSet(localProgress + random)\n                    checkIfFull(localProgress + random)\n                }\n            },\n            pressedContinuous.active ? pressedContinuous.refreshRate : null\n        )\n\n        return (\n            <div\n                className={containerClassName}\n                style={{ ...loaderContainerStyle, ...containerStyle }}\n            >\n                <div className={className} style={{ ...loaderStyle, ...style }}>\n                    {shadow ? (\n                        <div style={{ ...shadowStyle, ...shadowStyleProp }} />\n                    ) : null}\n                </div>\n            </div>\n        )\n    }\n)\n\nexport { IProps }\n\nexport default LoadingBar\n","import React, { useEffect, useState, useRef } from 'react'\n\nimport LoadingBar from 'react-top-loading-bar'\nimport './index.css'\nimport { changeColor } from './changeColor'\nimport Highlight from 'react-highlight'\n\nconst App = () => {\n    const [progress, setProgress] = useState(0)\n    const [barColor, setBarColor] = useState('#f11946')\n    const [buttonsColor, setButtonsColor] = useState('red')\n    const ref = useRef(null)\n    const [usingRef, setUsingRef] = useState(false)\n\n    const saveToClipboard = (text) => {\n        navigator.clipboard.writeText(text).then(() => {\n            window.alert('Copied To Clipboard')\n        })\n    }\n\n    const changeMode = (refMode) => {\n        if (refMode) {\n            setProgress(0)\n        }\n\n        setUsingRef(refMode)\n    }\n\n    return (\n        <div>\n            {usingRef ? (\n                <LoadingBar color={barColor} ref={ref} shadow={true} />\n            ) : (\n                <LoadingBar\n                    color={barColor}\n                    progress={progress}\n                    onLoaderFinished={() => setProgress(0)}\n                />\n            )}\n\n            <div className=\"text-container\">\n                <h1 className=\"header\">react-top-loading-bar</h1>\n                <div className=\"inline\">\n                    <code\n                        className=\"package-install-text\"\n                        onClick={() =>\n                            saveToClipboard('npm i react-top-loading-bar')\n                        }\n                    >\n                        npm i react-top-loading-bar\n                    </code>\n                    <br />\n                    or\n                    <br />\n                    <code\n                        className=\"package-install-text\"\n                        onClick={() =>\n                            saveToClipboard('yarn add react-top-loading-bar')\n                        }\n                    >\n                        yarn add react-top-loading-bar\n                    </code>\n                </div>\n            </div>\n            <div className=\"buttons-group\">\n                <Highlight language=\"javascript\" className=\"code-highlighter\">\n                    {usingRef\n                        ? `const ref = useRef(null);\\n<LoadingBar color={barColor} ref={ref} />\\nref.current.continuousStart()`\n                        : `const [progress,setProgress] = useState(0);\\n<LoadingBar color={barColor} progress={progress}\n    onLoaderFinished={() => setProgress(0)} />`}\n                </Highlight>\n                <br />\n                {usingRef ? (\n                    <div>\n                        <button\n                            className={'btn ' + buttonsColor}\n                            onClick={() => ref.current.continuousStart()}\n                        >\n                            Start Continuous Loading Bar\n                        </button>\n                        <button\n                            className={'btn ' + buttonsColor}\n                            onClick={() => ref.current.staticStart()}\n                        >\n                            Start Static Loading Bar\n                        </button>\n                        <button\n                            className={'btn ' + buttonsColor}\n                            onClick={() => ref.current.complete()}\n                        >\n                            Complete\n                        </button>\n                        <br />\n                    </div>\n                ) : (\n                    <div>\n                        <button\n                            className={'btn ' + buttonsColor}\n                            onClick={() => setProgress(progress + 10)}\n                        >\n                            Add 10%\n                        </button>\n                        <button\n                            className={'btn ' + buttonsColor}\n                            onClick={() => setProgress(progress + 30)}\n                        >\n                            Add 30%\n                        </button>\n                        <button\n                            className={'btn ' + buttonsColor}\n                            onClick={() => setProgress(progress + 50)}\n                        >\n                            Add 50%\n                        </button>\n\n                        <br />\n                    </div>\n                )}\n\n                <button\n                    className={'btn ' + buttonsColor}\n                    onClick={() => {\n                        const colors = changeColor(buttonsColor)\n                        setBarColor(colors.barColor)\n                        setButtonsColor(colors.color)\n                    }}\n                >\n                    Change Color\n                </button>\n                <button\n                    className={'btn ' + buttonsColor}\n                    onClick={() => changeMode(!usingRef)}\n                >\n                    Change to {usingRef ? 'State' : 'Refs'} Mode\n                </button>\n                <a\n                    className={'btn ' + buttonsColor}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={\n                        usingRef\n                            ? 'https://github.com/klendi/react-top-loading-bar/blob/master/example/examples/exampleWithRef.js'\n                            : 'https://github.com/klendi/react-top-loading-bar/blob/master/example/examples/exampleWithState.js'\n                    }\n                >\n                    Example\n                </a>\n                <br />\n                <br />\n                <div className=\"github-buttons\">\n                    <a\n                        className=\"github-button\"\n                        href=\"https://github.com/klendi/react-top-loading-bar\"\n                        data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n                        data-size=\"large\"\n                        data-show-count=\"true\"\n                        aria-label=\"Star klendi/react-top-loading-bar on GitHub\"\n                    >\n                        Star\n                    </a>{' '}\n                    <a\n                        className=\"github-button\"\n                        href=\"https://github.com/klendi\"\n                        data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n                        data-size=\"large\"\n                        data-show-count=\"true\"\n                        aria-label=\"Follow @klendi on GitHub\"\n                    >\n                        Follow @klendi\n                    </a>\n                </div>\n                <br />\n                <div>\n                    Made with ❤️ by{' '}\n                    <a\n                        href=\"https://klendi.dev\"\n                        style={{ color: barColor }}\n                        target=\"_blank\"\n                    >\n                        Klendi Gocci\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","export const changeColor = (currentColor) => {\n    function randomInt(min, max) {\n        let i = (Math.random() * 32768) >>> 0\n        return (i % (min - max)) + min\n    }\n    let colors = ['red', 'purple', 'green', 'teal', 'orange', 'blue']\n    colors = colors.filter((x) => x !== currentColor)\n    let i = randomInt(0, colors.length)\n\n    const color = colors[i]\n\n    let barColor = ''\n    switch (color) {\n        case 'red':\n            barColor = '#f11946'\n            break\n        case 'purple':\n            barColor = '#8800ff'\n            break\n        case 'green':\n            barColor = '#28b485'\n            break\n        case 'teal':\n            barColor = '#00ffe2'\n            break\n        case 'orange':\n            barColor = '#ff7c05'\n            break\n        case 'blue':\n            barColor = '#2998ff'\n            break\n\n        default:\n            barColor = '#f11946'\n            break\n    }\n    return { barColor, color }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}